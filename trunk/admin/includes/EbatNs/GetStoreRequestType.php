<?php
// autogenerated file 17.11.2006 13:29
// $Id: GetStoreRequestType.php,v 1.1.1.1 2006/12/22 14:38:09 gswkaiser Exp $
// $Log: GetStoreRequestType.php,v $
// Revision 1.1.1.1  2006/12/22 14:38:09  gswkaiser
// no message
//
//
require_once 'AbstractRequestType.php';

class GetStoreRequestType extends AbstractRequestType
{
	// start props
	// @var boolean $CategoryStructureOnly
	var $CategoryStructureOnly;
	// @var int $RootCategoryID
	var $RootCategoryID;
	// @var int $LevelLimit
	var $LevelLimit;
	// end props

/**
 *

 * @return boolean
 */
	function getCategoryStructureOnly()
	{
		return $this->CategoryStructureOnly;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCategoryStructureOnly($value)
	{
		$this->CategoryStructureOnly = $value;
	}
/**
 *

 * @return int
 */
	function getRootCategoryID()
	{
		return $this->RootCategoryID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setRootCategoryID($value)
	{
		$this->RootCategoryID = $value;
	}
/**
 *

 * @return int
 */
	function getLevelLimit()
	{
		return $this->LevelLimit;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setLevelLimit($value)
	{
		$this->LevelLimit = $value;
	}
/**
 *

 * @return 
 */
	function GetStoreRequestType()
	{
		$this->AbstractRequestType('GetStoreRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'CategoryStructureOnly' =>
				array(
					'required' => false,
					'type' => 'boolean',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'RootCategoryID' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'LevelLimit' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
