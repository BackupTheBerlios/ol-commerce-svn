<?php
// autogenerated file 17.11.2006 13:29
// $Id: GetMyeBayRequestType.php,v 1.1.1.1 2006/12/22 14:37:59 gswkaiser Exp $
// $Log: GetMyeBayRequestType.php,v $
// Revision 1.1.1.1  2006/12/22 14:37:59  gswkaiser
// no message
//
//
require_once 'ItemSortTypeCodeType.php';
require_once 'MyeBaySelectionType.php';
require_once 'AbstractRequestType.php';

class GetMyeBayRequestType extends AbstractRequestType
{
	// start props
	// @var ItemSortTypeCodeType $BiddingSort
	var $BiddingSort;
	// @var ItemSortTypeCodeType $LostSort
	var $LostSort;
	// @var int $MaxItemsPerList
	var $MaxItemsPerList;
	// @var int $MaxItemAgeInDays
	var $MaxItemAgeInDays;
	// @var ItemSortTypeCodeType $WatchSort
	var $WatchSort;
	// @var ItemSortTypeCodeType $WonSort
	var $WonSort;
	// @var MyeBaySelectionType $FavoriteSearches
	var $FavoriteSearches;
	// @var MyeBaySelectionType $FavoriteSellers
	var $FavoriteSellers;
	// @var MyeBaySelectionType $SecondChanceOffers
	var $SecondChanceOffers;
	// end props

/**
 *

 * @return ItemSortTypeCodeType
 */
	function getBiddingSort()
	{
		return $this->BiddingSort;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setBiddingSort($value)
	{
		$this->BiddingSort = $value;
	}
/**
 *

 * @return ItemSortTypeCodeType
 */
	function getLostSort()
	{
		return $this->LostSort;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setLostSort($value)
	{
		$this->LostSort = $value;
	}
/**
 *

 * @return int
 */
	function getMaxItemsPerList()
	{
		return $this->MaxItemsPerList;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setMaxItemsPerList($value)
	{
		$this->MaxItemsPerList = $value;
	}
/**
 *

 * @return int
 */
	function getMaxItemAgeInDays()
	{
		return $this->MaxItemAgeInDays;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setMaxItemAgeInDays($value)
	{
		$this->MaxItemAgeInDays = $value;
	}
/**
 *

 * @return ItemSortTypeCodeType
 */
	function getWatchSort()
	{
		return $this->WatchSort;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setWatchSort($value)
	{
		$this->WatchSort = $value;
	}
/**
 *

 * @return ItemSortTypeCodeType
 */
	function getWonSort()
	{
		return $this->WonSort;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setWonSort($value)
	{
		$this->WonSort = $value;
	}
/**
 *

 * @return MyeBaySelectionType
 */
	function getFavoriteSearches()
	{
		return $this->FavoriteSearches;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setFavoriteSearches($value)
	{
		$this->FavoriteSearches = $value;
	}
/**
 *

 * @return MyeBaySelectionType
 */
	function getFavoriteSellers()
	{
		return $this->FavoriteSellers;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setFavoriteSellers($value)
	{
		$this->FavoriteSellers = $value;
	}
/**
 *

 * @return MyeBaySelectionType
 */
	function getSecondChanceOffers()
	{
		return $this->SecondChanceOffers;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSecondChanceOffers($value)
	{
		$this->SecondChanceOffers = $value;
	}
/**
 *

 * @return 
 */
	function GetMyeBayRequestType()
	{
		$this->AbstractRequestType('GetMyeBayRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'BiddingSort' =>
				array(
					'required' => false,
					'type' => 'ItemSortTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'LostSort' =>
				array(
					'required' => false,
					'type' => 'ItemSortTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MaxItemsPerList' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'MaxItemAgeInDays' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'WatchSort' =>
				array(
					'required' => false,
					'type' => 'ItemSortTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'WonSort' =>
				array(
					'required' => false,
					'type' => 'ItemSortTypeCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'FavoriteSearches' =>
				array(
					'required' => false,
					'type' => 'MyeBaySelectionType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'FavoriteSellers' =>
				array(
					'required' => false,
					'type' => 'MyeBaySelectionType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SecondChanceOffers' =>
				array(
					'required' => false,
					'type' => 'MyeBaySelectionType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
