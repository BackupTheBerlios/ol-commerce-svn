<?php
// autogenerated file 17.11.2006 13:29
// $Id: GetRecommendationsRequestType.php,v 1.1.1.1 2006/12/22 14:38:04 gswkaiser Exp $
// $Log: GetRecommendationsRequestType.php,v $
// Revision 1.1.1.1  2006/12/22 14:38:04  gswkaiser
// no message
//
//
require_once 'RecommendationEngineCodeType.php';
require_once 'ListingFlowCodeType.php';
require_once 'ExternalProductIDType.php';
require_once 'ItemType.php';
require_once 'ModifiedFieldType.php';
require_once 'AbstractRequestType.php';

class GetRecommendationsRequestType extends AbstractRequestType
{
	// start props
	// @var ListingFlowCodeType $ListingFlow
	var $ListingFlow;
	// @var ItemType $Item
	var $Item;
	// @var ExternalProductIDType $ExternalProductID
	var $ExternalProductID;
	// @var ModifiedFieldType $ModifiedFields
	var $ModifiedFields;
	// @var RecommendationEngineCodeType $RecommendationEngine
	var $RecommendationEngine;
	// @var string $Query
	var $Query;
	// end props

/**
 *

 * @return ListingFlowCodeType
 */
	function getListingFlow()
	{
		return $this->ListingFlow;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setListingFlow($value)
	{
		$this->ListingFlow = $value;
	}
/**
 *

 * @return ItemType
 */
	function getItem()
	{
		return $this->Item;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItem($value)
	{
		$this->Item = $value;
	}
/**
 *

 * @return ExternalProductIDType
 */
	function getExternalProductID()
	{
		return $this->ExternalProductID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setExternalProductID($value)
	{
		$this->ExternalProductID = $value;
	}
/**
 *

 * @return ModifiedFieldType
 * @param  $index 
 */
	function getModifiedFields($index = null)
	{
		if ($index) {
		return $this->ModifiedFields[$index];
	} else {
		return $this->ModifiedFields;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setModifiedFields($value, $index = null)
	{
		if ($index) {
	$this->ModifiedFields[$index] = $value;
	} else {
	$this->ModifiedFields = $value;
	}

	}
/**
 *

 * @return RecommendationEngineCodeType
 * @param  $index 
 */
	function getRecommendationEngine($index = null)
	{
		if ($index) {
		return $this->RecommendationEngine[$index];
	} else {
		return $this->RecommendationEngine;
	}

	}
/**
 *

 * @return void
 * @param  $value 
 * @param  $index 
 */
	function setRecommendationEngine($value, $index = null)
	{
		if ($index) {
	$this->RecommendationEngine[$index] = $value;
	} else {
	$this->RecommendationEngine = $value;
	}

	}
/**
 *

 * @return string
 */
	function getQuery()
	{
		return $this->Query;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setQuery($value)
	{
		$this->Query = $value;
	}
/**
 *

 * @return 
 */
	function GetRecommendationsRequestType()
	{
		$this->AbstractRequestType('GetRecommendationsRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'ListingFlow' =>
				array(
					'required' => false,
					'type' => 'ListingFlowCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Item' =>
				array(
					'required' => false,
					'type' => 'ItemType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ExternalProductID' =>
				array(
					'required' => false,
					'type' => 'ExternalProductIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ModifiedFields' =>
				array(
					'required' => false,
					'type' => 'ModifiedFieldType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'RecommendationEngine' =>
				array(
					'required' => false,
					'type' => 'RecommendationEngineCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => true,
					'cardinality' => '0..*'
				),
				'Query' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
